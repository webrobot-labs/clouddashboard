generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  passwordHash String
}

model category {
  id   Int    @id @default(autoincrement())
  name String
  job  job[]
}

model inputdataset {
  id           Int                     @id @default(autoincrement())
  sourceType   inputdataset_sourceType
  location     String
  dataFormat   inputdataset_dataFormat
  jobtoproject jobtoproject[]
}

model script {
  id          Int    @id @default(autoincrement())
  name        String
  description String?  // Optional description of the script
  code        String?  // Contains the actual script code, nullable if not provided
  jobs        job[]    @relation("JobToScript")  // Lists all jobs associated with this script
}


model job {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  code          String?
  creationDate  DateTime       @default(now())
  latestEdit    DateTime       @default(now())
  categoryId    Int
  category      category       @relation(fields: [categoryId], references: [id])
  jobtoproject  jobtoproject[]
  scriptId      Int?           // Chiave esterna semplice verso Script
  script        script?        @relation(fields: [scriptId], references: [id], name: "JobToScript")

  @@index([categoryId], name: "idx_job_category")
  @@index([scriptId], name: "idx_job_script")
}


model jobtoproject {
  id             Int             @id @default(autoincrement())
  jobId          Int
  projectId      Int
  inputDatasetId Int?
  inputdataset   inputdataset?   @relation(fields: [inputDatasetId], references: [id], map: "JobToProject_inputDatasetId_fkey")
  job            job             @relation(fields: [jobId], references: [id], map: "JobToProject_jobId_fkey")
  project        project         @relation(fields: [projectId], references: [id], map: "JobToProject_projectId_fkey")
  outputdataset  outputdataset[]

  @@index([inputDatasetId], map: "JobToProject_inputDatasetId_fkey")
  @@index([jobId], map: "JobToProject_jobId_fkey")
  @@index([projectId], map: "JobToProject_projectId_fkey")
}

model outputdataset {
  id               Int          @id @default(autoincrement())
  creationDate     DateTime     @default(now())
  updateDate       DateTime?
  jobAssociationId Int
  jobtoproject     jobtoproject @relation(fields: [jobAssociationId], references: [id], map: "OutputDataset_jobAssociationId_fkey")

  @@index([jobAssociationId], map: "OutputDataset_jobAssociationId_fkey")
}

model project {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  frequency    project_frequency
  status       Int
  startDate    DateTime?
  endDate      DateTime?
  jobtoproject jobtoproject[]
}

enum inputdataset_sourceType {
  S3
  GoogleStorage
  HDFS
  Streaming
}

enum inputdataset_dataFormat {
  CSV
  XML
  OTHER
}

enum project_frequency {
  DAILY
  WEEKLY
  MONTHLY
  REAL_TIME
}
